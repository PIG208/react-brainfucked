{"version":3,"sources":["core/IOStream.ts","core/Interpreter.ts","tests/Fixtures.tsx","core/ImmutableList.ts","core/Runner.ts","core/utils.ts","hooks/useStream.ts","hooks/useBrainfuck.ts","components/Collapsable.tsx","components/Console.tsx","components/ControlPanel.tsx","components/Editor.tsx","components/GithubLink.tsx","components/UserManual.tsx","components/Memory.tsx","components/Visualization.tsx","components/App.tsx","index.tsx"],"names":["copyStream","stream","buffer","slice","readBuffer","initializeIOStream","size","pointer","readPointer","pendingSize","ioReducer","action","type","newStream","length","read","data","concat","Math","max","write","index","seek","instructionSet","Set","copyState","state","breakpoints","readMemory","memory","query","dataPointer","writeMemory","update","fetchInstruction","program","programCounter","isEnded","isStarted","blocked","isPaused","blockType","parse","output","startsWith","count","loopForward","ImmutableMap","loopBackward","split","filter","s","has","i","leftBrackets","Map","push","loopBeginning","pop","undefined","set","console","error","next","continuing","newState","binarySearch","instruction","age","overridePc","errorCode","stdin","Error","stdout","target","get","brainfuckReducer","writeToStdin","unblockBreakpoint","breakpoint","ioStreams","input","refreshIO","testHelloWorld","buildTree","start","end","mid","floor","left","right","key","value","queryTree","node","updateTree","newNode","Object","assign","sliceTree","result","List","root","fromArray","this","array","createList","MAX_PROGRAM_CYCLES","setupProgram","parsed","Array","fill","runCycles","cycles","cyclesCount","finalState","numCycles","ended","ASCIIsToString","n","String","fromCharCode","stringToASCIIs","from","map","c","charCodeAt","useStream","useState","setStream","dispatch","useCallback","DEFAULT_STREAM_SIZE","setup","Collapsable","altText","children","collapsed","setCollapsed","className","onClick","Console","programState","inputText","setInputText","ioBuffers","useMemo","inputBuffer","placeholder","onKeyUp","e","onChange","ControlPanel","setCode","running","disabled","Editor","code","enabled","language","val","padding","style","border","borderRadius","GithubLink","dangerouslySetInnerHTML","__html","UserManual","href","MemoryBlock","highlighted","toString","JSON","stringify","Memory","memoryLower","memoryUpper","memIndex","Visualization","memoryDisplayCount","min","currentBreakpointIndex","_","pc","getMemoryDisplayCount","width","App","initialProgram","setProgram","parsedProgram","inputStream","inputStreamDispatch","outputStream","outputStreamDispatch","setProgramState","setRunning","cycle","setCycle","useEffect","interval","setInterval","clearInterval","useBrainfuck","brainfuck","editorEnabled","window","innerWidth","setMemoryDisplayCount","handleResize","addEventListener","removeEventListener","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.44a413c0.chunk.js","sourcesContent":["import { ReducerAction } from \"../types\";\n\nexport type IOAction =\n  | ReducerAction<\"read\" | \"seek\", number>\n  | ReducerAction<\"write\", number | number[]>;\nexport type IOStream = {\n  buffer: number[];\n  size: number;\n  pointer: number;\n  // The buffer for the last read\n  readPointer: number;\n  readBuffer: number[];\n  pendingSize: number;\n};\n\nexport type ReadOutput = [stream: IOStream, data: number];\n\nconst copyStream = (stream: IOStream) => ({\n  ...stream,\n  buffer: stream.buffer.slice(0),\n  readBuffer: stream.readBuffer.slice(0),\n});\n\n/**\n * When the stream is blocked (pendingSize > 0), no data will be read into the buffer\n */\nexport const read = (stream: IOStream, size: number): IOStream => {\n  let newStream = copyStream(stream);\n  if (newStream.pendingSize > 0 || newStream.buffer.length <= newStream.readPointer) {\n    newStream.pendingSize += size;\n    return newStream;\n  }\n\n  // Read `size` of bytes from the buffer\n  newStream.readBuffer = newStream.buffer.slice(\n    newStream.readPointer,\n    newStream.readPointer + size\n  );\n\n  newStream.readPointer = newStream.readPointer + newStream.readBuffer.length;\n  if (newStream.readBuffer.length < size) {\n    // We haven't read enough bytes, expect more inputs\n    newStream.pendingSize += size - newStream.readBuffer.length;\n  }\n\n  return newStream;\n};\n\nexport const write = (stream: IOStream, data: number | number[]): IOStream => {\n  if (typeof data == \"number\") data = [data];\n\n  let newStream = copyStream(stream);\n  newStream.buffer = newStream.buffer.slice(0, newStream.pointer).concat(data);\n  newStream.pointer += data.length;\n\n  if (newStream.pendingSize > 0) {\n    // Prevent pendingSize from underflowing\n    newStream.pendingSize = Math.max(newStream.pendingSize - data.length, 0);\n  }\n\n  return newStream;\n};\n\nconst seek = (stream: IOStream, index: number): IOStream => {\n  let newStream = copyStream(stream);\n  newStream.pointer = index;\n  newStream.readPointer = index;\n  return newStream;\n};\n\nexport const initializeIOStream = (size: number): IOStream => ({\n  buffer: [],\n  size: size,\n  pointer: 0,\n  readPointer: 0,\n  readBuffer: [],\n  pendingSize: 0,\n});\n\nexport const ioReducer = (stream: IOStream, action: IOAction): IOStream => {\n  switch (action.type) {\n    case \"read\":\n      return read(stream, action.data);\n    case \"write\":\n      return write(stream, action.data);\n    case \"seek\":\n      return seek(stream, action.data);\n  }\n};\n","import binarySearch from \"binarysearch\";\n// External library for laziness (and performance)\nimport { Map as ImmutableMap } from \"immutable\";\n\nimport { ReducerAction } from \"../types\";\nimport { ioReducer, IOStream } from \"./IOStream\";\n// Homemade Immutable List just for fun\nimport { List } from \"./ImmutableList\";\n\nexport type IOStreams = {\n  input: IOStream;\n  output: IOStream;\n};\nexport type BrainfuckCoreAction =\n  | ReducerAction<\"next\" | \"continue\">\n  | ReducerAction<\"breakpoint\", number>\n  | ReducerAction<\"write\", number[]>\n  | ReducerAction<\"refresh-io\", IOStreams>;\nconst instructionSet = new Set([\"<\", \">\", \",\", \".\", \"[\", \"]\", \"+\", \"-\"]);\nexport type Instruction = \"<\" | \">\" | \",\" | \".\" | \"[\" | \"]\" | \"+\" | \"-\";\nexport type BlockType = \"none\" | \"io\" | \"breakpoint\" | \"error\";\nexport type ErrorCode = \"memory-out-of-bounds\" | \"none\";\nexport type ParseResult = {\n  program: Instruction[];\n  loopForward: ImmutableMap<number, number>;\n  loopBackward: ImmutableMap<number, number>;\n};\n\nexport type ProgramState = {\n  age: number;\n  programCounter: number;\n  dataPointer: number;\n  memory: List<number>;\n  program: Instruction[];\n\n  breakpoints: number[];\n  loopForward: ImmutableMap<number, number>;\n  loopBackward: ImmutableMap<number, number>;\n  blocked: boolean;\n  blockType: BlockType;\n  errorCode: ErrorCode;\n\n  stdin: IOStream;\n  stdout: IOStream;\n};\n\nconst copyState = (state: ProgramState): ProgramState => ({\n  ...state,\n  // TODO: Implement immutable dynamic list\n  breakpoints: state.breakpoints.slice(0),\n});\n\nconst readMemory = (state: ProgramState) => state.memory.query(state.dataPointer);\nconst writeMemory = (state: ProgramState, data: number) =>\n  (state.memory = state.memory.update(state.dataPointer, data));\nconst fetchInstruction = (state: ProgramState): Instruction => state.program[state.programCounter];\n\nexport const isEnded = (state: ProgramState) => state.programCounter === state.program.length;\nexport const isStarted = (state: ProgramState) => state.programCounter > 0 || state.blocked;\nexport const isPaused = (state: ProgramState) => state.blockType === \"breakpoint\" && state.blocked;\n\n/**\n * Parse out the initial loop and ignore non-instruction characters\n */\nexport const parse = (program: string): ParseResult => {\n  let output: Instruction[] = [];\n  if (program.startsWith(\"[\")) {\n    let count = 1,\n      index = 1;\n    while (count > 0) {\n      if (program[index] === \"[\") {\n        count++;\n      }\n      if (program[index] === \"]\") {\n        count--;\n      }\n      if (index > 30000) {\n        return {\n          program: [],\n          loopForward: ImmutableMap(),\n          loopBackward: ImmutableMap(),\n        };\n      }\n      index++;\n    }\n    program = program.slice(index + 1);\n  }\n\n  output = program.split(\"\").filter((s) => instructionSet.has(s)) as any;\n\n  let i = 0;\n  let leftBrackets: number[] = [];\n  let loopForward = new Map<number, number>(),\n    loopBackward = new Map<number, number>();\n\n  for (; i < output.length; i++) {\n    if (output[i] === \"[\") {\n      leftBrackets.push(i);\n    } else if (output[i] === \"]\") {\n      let loopBeginning = leftBrackets.pop();\n      if (loopBeginning === undefined) break;\n\n      loopForward.set(loopBeginning, i);\n      loopBackward.set(i, loopBeginning);\n    }\n  }\n\n  if (leftBrackets.length > 0 || i < output.length) console.error(\"Unbalanced loops\");\n\n  return {\n    program: output,\n    loopForward: ImmutableMap(loopForward),\n    loopBackward: ImmutableMap(loopBackward),\n  };\n};\n\nconst next = (state: ProgramState, continuing: boolean = false): ProgramState => {\n  if (isEnded(state) || state.blocked) return state;\n\n  let newState = copyState(state);\n\n  if (binarySearch(newState.breakpoints, newState.programCounter) >= 0 && !continuing) {\n    // Breakpoint is triggered, it has a higher priority than the io block\n    newState.blocked = true;\n    newState.blockType = \"breakpoint\";\n    return newState;\n  }\n\n  const instruction = fetchInstruction(newState);\n  newState.age++;\n  let overridePc = false;\n\n  switch (instruction) {\n    case \">\":\n      if (newState.dataPointer + 1 >= newState.memory.size()) {\n        newState.blocked = true;\n        newState.errorCode = \"memory-out-of-bounds\";\n        newState.blockType = \"error\";\n        return newState;\n      }\n      newState.dataPointer++;\n      break;\n    case \"<\":\n      if (newState.dataPointer - 1 < 0) {\n        newState.blocked = true;\n        newState.errorCode = \"memory-out-of-bounds\";\n        newState.blockType = \"error\";\n        return newState;\n      }\n      newState.dataPointer--;\n      break;\n    case \"+\":\n      writeMemory(newState, readMemory(newState) + (1 % 256));\n      break;\n    case \"-\":\n      writeMemory(newState, (readMemory(newState) - 1 + 256) % 256);\n      break;\n    case \",\":\n      newState.stdin = ioReducer(newState.stdin, { type: \"read\", data: 1 });\n      if (newState.stdin.pendingSize > 0) {\n        // The stream is blocked, do not proceed\n        // The only way to resolve a blocked stream is to dispatch `write`\n        newState.blocked = true;\n        newState.blockType = \"io\";\n        return newState;\n      }\n      writeMemory(newState, newState.stdin.readBuffer[0]);\n      if (newState.stdin.readBuffer[0] === undefined)\n        throw new Error(`invalid write ${newState.stdin}`);\n      break;\n    case \".\":\n      newState.stdout = ioReducer(newState.stdout, { type: \"write\", data: readMemory(newState) });\n      break;\n    case \"[\":\n      if (readMemory(newState) === 0) {\n        // Skip the entire loop body until we reaches the corresponding ]\n        const target = newState.loopForward.get(newState.programCounter);\n        if (target === undefined) throw new Error(\"Cannot find the corresponding ]\");\n        newState.programCounter = target + 1;\n        overridePc = true;\n      }\n      break;\n    case \"]\":\n      if (readMemory(newState) !== 0) {\n        // Skip the entire loop body until we reaches the corresponding ]\n        const target = newState.loopBackward.get(newState.programCounter);\n        if (target === undefined) throw new Error(\"Cannot find the corresponding ]\");\n        newState.programCounter = target + 1;\n        overridePc = true;\n      }\n      break;\n  }\n\n  if (!overridePc) newState.programCounter++;\n\n  return newState;\n};\n\n/**\n * Write directly to the standard input stream\n */\nconst writeToStdin = (state: ProgramState, data: number[]) => {\n  let newState = copyState(state);\n  newState.stdin = ioReducer(newState.stdin, { type: \"write\", data: data });\n  if (newState.stdin.pendingSize === 0 && newState.blockType === \"io\") {\n    newState.blocked = false;\n    newState.blockType = \"none\";\n  }\n\n  return newState;\n};\n\nconst unblockBreakpoint = (state: ProgramState) => {\n  let newState = copyState(state);\n  if (newState.blocked && newState.blockType === \"breakpoint\") {\n    newState.blocked = false;\n    newState.blockType = \"none\";\n  }\n\n  return newState;\n};\n\nconst breakpoint = (state: ProgramState, breakpoint: number) => {\n  let newState = copyState(state);\n  for (let i = 0; i <= newState.breakpoints.length; i++) {\n    if (newState.breakpoints[i] === breakpoint) {\n      newState.breakpoints = newState.breakpoints\n        .slice(0, i)\n        .concat(newState.breakpoints.slice(i + 1, newState.breakpoints.length));\n      return newState;\n    }\n\n    if (i === newState.breakpoints.length || newState.breakpoints[i] > breakpoint) {\n      newState.breakpoints = newState.breakpoints\n        .slice(0, i)\n        .concat([breakpoint], newState.breakpoints.slice(i, newState.breakpoints.length));\n      return newState;\n    }\n  }\n\n  return newState;\n};\n\nconst refreshIO = (state: ProgramState, ioStreams: IOStreams) => {\n  let newState = copyState(state);\n  newState.stdin = ioStreams.input;\n  newState.stdout = ioStreams.output;\n  return newState;\n};\n\nexport const brainfuckReducer = (\n  state: ProgramState,\n  action: BrainfuckCoreAction\n): ProgramState => {\n  switch (action.type) {\n    case \"next\":\n      return next(state);\n    case \"write\":\n      return writeToStdin(state, action.data);\n    case \"continue\":\n      return next(unblockBreakpoint(state), true);\n    case \"breakpoint\":\n      return breakpoint(state, action.data);\n    case \"refresh-io\":\n      return refreshIO(state, action.data);\n  }\n};\n","import { IOStream } from \"../core/IOStream\";\nimport { Instruction } from \"../core/Interpreter\";\n\nexport const MockStream = (content: string = \"\"): IOStream => ({\n  buffer: Array.from(content).map((c) => c.charCodeAt(0)),\n  size: Infinity,\n  pointer: content.length,\n  readPointer: 0,\n  readBuffer: [],\n  pendingSize: 0,\n});\n\nexport type Fixture = {\n  raw: string;\n  parsed: Instruction[];\n};\n\nexport const testHelloWorld: Fixture = {\n  raw: `[ Credits: Wikipedia\nThis program prints \"Hello World!\" and a newline to the screen, its\nlength is 106 active command characters. [It is not the shortest.]\n\nThis loop is an \"initial comment loop\", a simple way of adding a comment\nto a BF program such that you don't have to worry about any command\ncharacters. Any \".\", \",\", \"+\", \"-\", \"<\" and \">\" characters are simply\nignored, the \"[\" and \"]\" characters just have to be balanced. This\nloop and the commands it contains are ignored because the current cell\ndefaults to a value of 0; the 0 value causes this loop to be skipped.\n]\n++++++++               Set Cell #0 to 8\n[\n  >++++               Add 4 to Cell #1; this will always set Cell #1 to 4\n  [                   as the cell will be cleared by the loop\n      >++             Add 2 to Cell #2\n      >+++            Add 3 to Cell #3\n      >+++            Add 3 to Cell #4\n      >+              Add 1 to Cell #5\n      <<<<-           Decrement the loop counter in Cell #1\n  ]                   Loop until Cell #1 is zero; number of iterations is 4\n  >+                  Add 1 to Cell #2\n  >+                  Add 1 to Cell #3\n  >-                  Subtract 1 from Cell #4\n  >>+                 Add 1 to Cell #6\n  [<]                 Move back to the first zero cell you find; this will\n                      be Cell #1 which was cleared by the previous loop\n  <-                  Decrement the loop Counter in Cell #0\n]                       Loop until Cell #0 is zero; number of iterations is 8\n\nThe result of this is:\nCell no :   0   1   2   3   4   5   6\nContents:   0   0  72 104  88  32   8\nPointer :   ^\n\n>>.                     Cell #2 has value 72 which is 'H'\n>---.                   Subtract 3 from Cell #3 to get 101 which is 'e'\n+++++++..+++.           Likewise for 'llo' from Cell #3\n>>.                     Cell #5 is 32 for the space\n<-.                     Subtract 1 from Cell #4 for 87 to give a 'W'\n<.                      Cell #3 was set to 'o' from the end of 'Hello'\n+++.------.--------.    Cell #3 for 'rl' and 'd'\n>>+.                    Add 1 to Cell #5 gives us an exclamation point\n>++.                    And finally a newline from Cell #6`,\n  parsed: [\n    \"+\",\n    \"+\",\n    \"+\",\n    \"+\",\n    \"+\",\n    \"+\",\n    \"+\",\n    \"+\",\n    \"[\",\n    \">\",\n    \"+\",\n    \"+\",\n    \"+\",\n    \"+\",\n    \"[\",\n    \">\",\n    \"+\",\n    \"+\",\n    \">\",\n    \"+\",\n    \"+\",\n    \"+\",\n    \">\",\n    \"+\",\n    \"+\",\n    \"+\",\n    \">\",\n    \"+\",\n    \"<\",\n    \"<\",\n    \"<\",\n    \"<\",\n    \"-\",\n    \"]\",\n    \">\",\n    \"+\",\n    \">\",\n    \"+\",\n    \">\",\n    \"-\",\n    \">\",\n    \">\",\n    \"+\",\n    \"[\",\n    \"<\",\n    \"]\",\n    \"<\",\n    \"-\",\n    \"]\",\n    \">\",\n    \">\",\n    \".\",\n    \">\",\n    \"-\",\n    \"-\",\n    \"-\",\n    \".\",\n    \"+\",\n    \"+\",\n    \"+\",\n    \"+\",\n    \"+\",\n    \"+\",\n    \"+\",\n    \".\",\n    \".\",\n    \"+\",\n    \"+\",\n    \"+\",\n    \".\",\n    \">\",\n    \">\",\n    \".\",\n    \"<\",\n    \"-\",\n    \".\",\n    \"<\",\n    \".\",\n    \"+\",\n    \"+\",\n    \"+\",\n    \".\",\n    \"-\",\n    \"-\",\n    \"-\",\n    \"-\",\n    \"-\",\n    \"-\",\n    \".\",\n    \"-\",\n    \"-\",\n    \"-\",\n    \"-\",\n    \"-\",\n    \"-\",\n    \"-\",\n    \"-\",\n    \".\",\n    \">\",\n    \">\",\n    \"+\",\n    \".\",\n    \">\",\n    \"+\",\n    \"+\",\n    \".\",\n  ],\n};\n\nexport const nestedLoop: Fixture = {\n  raw: \">++++[>,.<->>+++[>+<-]<<]\",\n  parsed: [\n    \">\",\n    \"+\",\n    \"+\",\n    \"+\",\n    \"+\",\n    \"[\",\n    \">\",\n    \",\",\n    \".\",\n    \"<\",\n    \"-\",\n    \">\",\n    \">\",\n    \"+\",\n    \"+\",\n    \"+\",\n    \"[\",\n    \">\",\n    \"+\",\n    \"<\",\n    \"-\",\n    \"]\",\n    \"<\",\n    \"<\",\n    \"]\",\n  ],\n};\n","type TreeNode<V> = {\n  size: number;\n  key: number;\n  value: V;\n  left?: TreeNode<V>;\n  right?: TreeNode<V>;\n};\n\nconst buildTree = <V>(data: V[], start: number, end: number): TreeNode<V> => {\n  if (start > end) throw new Error(\"Cannot parse an empty array\");\n\n  const mid = start + Math.floor((end - start) / 2);\n  const left = start < mid ? buildTree(data, start, mid - 1) : undefined;\n  const right = end > mid ? buildTree(data, mid + 1, end) : undefined;\n  return {\n    size: (left?.size ?? 0) + (right?.size ?? 0) + 1,\n    key: mid,\n    value: data[mid],\n    left: left,\n    right: right,\n  };\n};\n\nconst queryTree = <V>(key: number, node?: TreeNode<V>): V => {\n  if (!!!node) throw new Error(\"List index out of bounds\");\n  if (node.key === key) return node.value;\n\n  return node.key > key ? queryTree(key, node.left) : queryTree(key, node.right);\n};\n\nconst updateTree = <V>(key: number, value: V, node?: TreeNode<V>): TreeNode<V> => {\n  if (!!!node) throw new Error(\"List index out of bounds\");\n  let newNode = Object.assign({}, node);\n\n  if (newNode.key === key) {\n    newNode.value = value;\n    return newNode;\n  }\n\n  if (newNode.key > key) {\n    newNode.left = updateTree(key, value, newNode.left);\n  } else {\n    newNode.right = updateTree(key, value, newNode.right);\n  }\n\n  return newNode;\n};\n\nconst sliceTree = <V>(result: V[], start: number, end: number, node?: TreeNode<V>) => {\n  if (!!!node) throw new Error(\"List index out of range\");\n\n  if (node.left) sliceTree(result, start, end, node.left);\n  if (node.key >= start && node.key < end) result.push(node.value);\n  if (node.right) sliceTree(result, start, end, node.right);\n};\n\nconst createList = <V>(data: V[]): List<V> => new List({ fromArray: true, array: data });\n\nexport class List<V> {\n  root: TreeNode<V>;\n  constructor(data: { fromArray: true; array: V[] } | { fromArray: false; root: TreeNode<V> }) {\n    if (data.fromArray) {\n      this.root = buildTree(data.array, 0, data.array.length - 1);\n    } else {\n      this.root = data.root;\n    }\n  }\n\n  query(key: number): V {\n    return queryTree(key, this.root);\n  }\n\n  /**\n   * Perform an efficient immutable update to the list\n   */\n  update(key: number, value: V): List<V> {\n    const newRoot = updateTree(key, value, this.root);\n    return new List({ fromArray: false, root: newRoot });\n  }\n\n  slice(start: number, end: number): V[] {\n    let result: V[] = [];\n    sliceTree(result, start, end, this.root);\n    return result;\n  }\n\n  size(): number {\n    return this.root.size;\n  }\n}\n\nexport default createList;\n","import { MockStream } from \"../tests/Fixtures\";\nimport { IOStream } from \"./IOStream\";\nimport createList from \"./ImmutableList\";\nimport { ProgramState, brainfuckReducer, isEnded, ParseResult, parse } from \"./Interpreter\";\n\nexport type RunResult = {\n  finalState: ProgramState;\n  numCycles: number;\n  ended: boolean;\n};\n\nconst MEMORY_SIZE = 30000;\nexport const MAX_PROGRAM_CYCLES = 2 << 16;\n\nexport const setupProgram = (\n  parsed: ParseResult,\n  stdin: IOStream,\n  stdout: IOStream\n): ProgramState => ({\n  age: 0,\n  programCounter: 0,\n  dataPointer: 0,\n  memory: createList(Array(MEMORY_SIZE).fill(0)),\n  program: parsed.program,\n\n  breakpoints: [],\n  blocked: false,\n  blockType: \"none\",\n  loopForward: parsed.loopForward,\n  loopBackward: parsed.loopBackward,\n  errorCode: \"none\",\n\n  stdin: stdin,\n  stdout: stdout,\n});\n\nexport const setupTestProgram = (program: string, input: string = \"\") =>\n  setupProgram(parse(program), MockStream(input), MockStream());\n\nexport const runCycles = (state: ProgramState, cycles: number): RunResult => {\n  let cyclesCount = 0;\n  while (!isEnded(state) && cyclesCount++ < cycles) {\n    state = brainfuckReducer(state, { type: \"next\" });\n  }\n  return {\n    finalState: state,\n    numCycles: cyclesCount,\n    ended: isEnded(state),\n  };\n};\n\nexport const run = (state: ProgramState): RunResult => {\n  let cycles = 0;\n  while (!isEnded(state) && ++cycles < MAX_PROGRAM_CYCLES) {\n    state = brainfuckReducer(state, { type: \"next\" });\n    if (state.blocked) break;\n  }\n\n  if (cycles === MAX_PROGRAM_CYCLES && !isEnded(state)) {\n    console.error(\"Time limit exceed\");\n  }\n\n  return {\n    finalState: state,\n    numCycles: cycles,\n    ended: isEnded(state),\n  };\n};\n","export const ASCIIsToString = (n: number[]): string => String.fromCharCode(...n);\nexport const stringToASCIIs = (s: string): number[] => Array.from(s).map((c) => c.charCodeAt(0));\n","import { useCallback, useState } from \"react\";\n\nimport { initializeIOStream, IOAction, ioReducer, IOStream } from \"../core/IOStream\";\nimport { ReducerAction, ReducerHookReturnType } from \"../types\";\n\nexport type StreamAction = IOAction | ReducerAction<\"reset\">;\n\nexport const useStream = (size: number): ReducerHookReturnType<IOStream, StreamAction> => {\n  const [stream, setStream] = useState<IOStream>(initializeIOStream(size));\n\n  const dispatch = useCallback(\n    (action: StreamAction) => {\n      if (action.type === \"reset\") {\n        setStream(initializeIOStream(size));\n        return;\n      }\n\n      setStream((stream) => ioReducer(stream, action));\n    },\n    [setStream, size]\n  );\n\n  return [stream, dispatch];\n};\n","import { useCallback, useEffect, useMemo, useState } from \"react\";\n\nimport { IOStream } from \"../core/IOStream\";\nimport { brainfuckReducer, isEnded, parse, ParseResult, ProgramState } from \"../core/Interpreter\";\nimport { MAX_PROGRAM_CYCLES, runCycles, setupProgram } from \"../core/Runner\";\nimport { stringToASCIIs } from \"../core/utils\";\nimport { ReducerAction, ReducerHookReturnType } from \"../types\";\nimport { useStream } from \"./useStream\";\n\nexport type BrainfuckAction =\n  | ReducerAction<\"load\", string>\n  | ReducerAction<\"next\" | \"reset\" | \"reset-io\" | \"run\" | \"stop\" | \"continue\">\n  | ReducerAction<\"write\", string>\n  | ReducerAction<\"breakpoint\", number>;\nconst DEFAULT_STREAM_SIZE = 2 << 10;\nconst setup = (parsed: ParseResult, input: IOStream, output: IOStream) =>\n  setupProgram(parsed, input, output);\n\nexport const useBrainfuck = (\n  initialProgram: string = \"\"\n): ReducerHookReturnType<ProgramState, BrainfuckAction, boolean> => {\n  const [program, setProgram] = useState(initialProgram);\n  const parsedProgram = useMemo(() => {\n    return parse(program);\n  }, [program]);\n  const [inputStream, inputStreamDispatch] = useStream(DEFAULT_STREAM_SIZE);\n  const [outputStream, outputStreamDispatch] = useStream(DEFAULT_STREAM_SIZE);\n  const [programState, setProgramState] = useState<ProgramState>(\n    setup(parsedProgram, inputStream, outputStream)\n  );\n  const [running, setRunning] = useState(false);\n  const [cycle, setCycle] = useState(0);\n\n  useEffect(() => {\n    setProgramState((programState) => {\n      let state = brainfuckReducer(programState, {\n        type: \"refresh-io\",\n        data: { input: inputStream, output: outputStream },\n      });\n      return state;\n    });\n  }, [inputStream, outputStream]);\n\n  useEffect(() => {\n    let interval = setInterval(() => {\n      if (!running) return;\n      setCycle((cycle) => cycle + 1);\n      setProgramState((programState) => runCycles(programState, 3).finalState);\n    }, 0);\n\n    return () => clearInterval(interval);\n  }, [running]);\n\n  useEffect(() => {\n    if (isEnded(programState) || programState.blocked || cycle > MAX_PROGRAM_CYCLES) {\n      setRunning(false);\n    }\n  }, [cycle, programState]);\n\n  const dispatch = useCallback(\n    (action: BrainfuckAction) => {\n      switch (action.type) {\n        case \"load\":\n          setRunning(false);\n          setProgram(action.data);\n          break;\n        case \"next\":\n          setProgramState((programState) => brainfuckReducer(programState, { type: \"next\" }));\n          break;\n        case \"run\":\n          setRunning(true);\n          break;\n        case \"stop\":\n          setRunning(false);\n          break;\n        case \"reset\":\n          setRunning(false);\n          setProgramState((programState) =>\n            setup(parsedProgram, programState.stdin, programState.stdout)\n          );\n          break;\n        case \"reset-io\":\n          inputStreamDispatch({ type: \"reset\" });\n          outputStreamDispatch({ type: \"reset\" });\n          break;\n        case \"write\":\n          setProgramState((programState) =>\n            brainfuckReducer(programState, { type: \"write\", data: stringToASCIIs(action.data) })\n          );\n          break;\n        case \"breakpoint\":\n          setProgramState((programState) =>\n            brainfuckReducer(programState, { type: \"breakpoint\", data: action.data })\n          );\n          break;\n        case \"continue\":\n          setProgramState((programState) => brainfuckReducer(programState, { type: \"continue\" }));\n          break;\n      }\n    },\n    [parsedProgram, inputStreamDispatch, outputStreamDispatch]\n  );\n\n  return [programState, dispatch, running];\n};\n","import { PropsWithChildren, useState } from \"react\";\n\nimport \"../css/Collapsable.css\";\n\nconst Collapsable = ({ altText, children }: PropsWithChildren<{ altText?: string }>) => {\n  const [collapsed, setCollapsed] = useState(false);\n\n  return (\n    <div className={`collapsable${collapsed ? \" collapsable-collapsed\" : \"\"}`}>\n      <button className={\"btn-collapsable\"} onClick={() => setCollapsed((collapsed) => !collapsed)}>\n        {collapsed ? `${altText ?? \"+\"}` : \"-\"}\n      </button>\n      {!collapsed && <div>{children}</div>}\n    </div>\n  );\n};\n\nexport default Collapsable;\n","import { useMemo, useState } from \"react\";\n\nimport { BrainfuckAction } from \"../hooks/useBrainfuck\";\n\nimport \"../css/Console.css\";\n\nimport { ProgramState } from \"../core/Interpreter\";\nimport { ASCIIsToString } from \"../core/utils\";\n\nexport type ConsoleProps = {\n  programState: ProgramState;\n  dispatch: (action: BrainfuckAction) => void;\n};\n\nconst Console = ({ programState, dispatch }: ConsoleProps) => {\n  const [inputText, setInputText] = useState(\"\");\n  const ioBuffers = useMemo(\n    () => ({\n      output: ASCIIsToString(programState.stdout.buffer),\n      input: ASCIIsToString(programState.stdin.buffer),\n      inputBuffer: `\"${ASCIIsToString(programState.stdin.readBuffer)}\"`,\n    }),\n    [programState]\n  );\n\n  return (\n    <div>\n      <h2>Output</h2>\n      <div className=\"console\">\n        <div className=\"console-text\">\n          <pre>{ioBuffers.output}</pre>\n        </div>\n      </div>\n      <h2>Input</h2>\n      <div>\n        Last read:{\" \"}\n        {ioBuffers.inputBuffer !== '\"\"' ? (\n          <>\n            <span>{ioBuffers.inputBuffer}</span>&nbsp; at {programState.stdin.readPointer}\n          </>\n        ) : (\n          \"(empty)\"\n        )}\n      </div>\n      <div className=\"console with-input\">\n        <div className=\"console-text\">\n          <pre>{ioBuffers.input}</pre>\n        </div>\n        <div className=\"console-input\">\n          <input\n            placeholder=\"This is the console\"\n            value={inputText}\n            onKeyUp={(e) => {\n              if (e.key === \"Enter\") {\n                dispatch({ type: \"write\", data: inputText + '\\0' });\n                setInputText(\"\");\n              }\n            }}\n            onChange={(e) => setInputText(e.target.value + \"\\n\")}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Console;\n","import { BrainfuckAction } from \"../hooks/useBrainfuck\";\n\nimport \"../css/ControlPanel.css\";\n\nimport { ProgramState, isEnded, isStarted, isPaused } from \"../core/Interpreter\";\nimport { testHelloWorld } from \"../tests/Fixtures\";\n\nexport type ControlPanelProps = {\n  running: boolean;\n  programState: ProgramState;\n  setCode: (code: string) => void;\n  dispatch: (action: BrainfuckAction) => void;\n};\n\nconst ControlPanel = ({ programState, setCode, dispatch, running }: ControlPanelProps) => (\n  <div>\n    <h2>\n      Control Panel{\" \"}\n      {programState.program.length === 0 && (\n        <span className=\"note\">(enter any bf program to get started)</span>\n      )}\n    </h2>\n    <p>\n      Status:{\" \"}\n      {!isStarted(programState)\n        ? \"not started\"\n        : isEnded(programState)\n        ? \"ended\"\n        : programState.blocked\n        ? `${programState.blockType === \"error\" ? \"error\" : \"blocked\"}${\n            programState.blockType === \"breakpoint\"\n              ? \" (breakpoint)\"\n              : programState.blockType === \"io\"\n              ? \" (input required)\"\n              : programState.blockType === \"error\"\n              ? ` (${programState.errorCode})`\n              : \"\"\n          }`\n        : \"running\"}\n    </p>\n    <ul className=\"panel\">\n      <li>\n        <button\n          className=\"btn\"\n          onClick={() => {\n            if (running) {\n              dispatch({ type: \"stop\" });\n              return;\n            }\n\n            if (isPaused(programState)) dispatch({ type: \"continue\" });\n            dispatch({ type: \"run\" });\n          }}\n          disabled={\n            programState.program.length === 0 ||\n            isEnded(programState) ||\n            (programState.blocked && !isPaused(programState))\n          }\n        >\n          {!isStarted(programState) ? \"Run\" : running ? \"Stop\" : \"Continue\"}\n        </button>\n      </li>\n      <li>\n        <button\n          className=\"btn\"\n          onClick={() => {\n            if (isPaused(programState)) dispatch({ type: \"continue\" });\n            else dispatch({ type: \"next\" });\n          }}\n          disabled={\n            isEnded(programState) || running || (programState.blocked && !isPaused(programState))\n          }\n        >\n          {!isStarted(programState) ? \"Start\" : \"Step\"}\n        </button>\n      </li>\n      <li>\n        <button\n          className=\"btn\"\n          onClick={() => {\n            if (!isStarted(programState)) {\n              dispatch({ type: \"reset-io\" });\n            }\n            dispatch({ type: \"reset\" });\n          }}\n          disabled={programState.program.length === 0}\n        >\n          Reset{\" \"}\n          {!isStarted(programState) &&\n          (programState.stdin.pointer > 0 || programState.stdout.pointer > 0)\n            ? \"IO\"\n            : \"\"}\n        </button>\n      </li>\n      <li>\n        <button className=\"btn\" onClick={() => setCode(testHelloWorld.raw)}>\n          Hello World!\n        </button>\n      </li>\n    </ul>\n  </div>\n);\n\nexport default ControlPanel;\n","import CodeEditor from \"@uiw/react-textarea-code-editor\";\n\nexport type EditorProps = {\n  code: string;\n  setCode: (val: string) => void;\n  enabled: boolean;\n};\n\nconst Editor = ({ code, setCode, enabled }: EditorProps) => {\n  return (\n    <div>\n      <h2>Editor</h2>\n      <CodeEditor\n        value={code}\n        language=\"brainfuck\"\n        placeholder=\"brainfuck program here\"\n        onChange={(val) => setCode(val.target.value)}\n        padding={10}\n        style={{\n          border: \"1px solid black\",\n          borderRadius: \"var(--border-radius)\",\n        }}\n        disabled={!enabled}\n      />\n    </div>\n  );\n};\n\nexport default Editor;\n","/**\n * Credits: https://tholman.com/github-corners/\n */\nconst GithubLink = () => {\n  return (\n    <div\n      dangerouslySetInnerHTML={{\n        __html:\n          '<a href=\"https://github.com/PIG208/react-brainfucked\" class=\"github-corner\" aria-label=\"View source on GitHub\"><svg width=\"80\" height=\"80\" viewBox=\"0 0 250 250\" style=\"fill:#151513; color:#fff; position: absolute; top: 0; border: 0; right: 0;\" aria-hidden=\"true\"><path d=\"M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z\"></path><path d=\"M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2\" fill=\"currentColor\" style=\"transform-origin: 130px 106px;\" class=\"octo-arm\"></path><path d=\"M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z\" fill=\"currentColor\" class=\"octo-body\"></path></svg></a><style>.github-corner:hover .octo-arm{animation:octocat-wave 560ms ease-in-out}@keyframes octocat-wave{0%,100%{transform:rotate(0)}20%,60%{transform:rotate(-25deg)}40%,80%{transform:rotate(10deg)}}@media (max-width:500px){.github-corner:hover .octo-arm{animation:none}.github-corner .octo-arm{animation:octocat-wave 560ms ease-in-out}}</style>',\n      }}\n    ></div>\n  );\n};\n\nexport default GithubLink;\n","import \"../css/UserManual.css\";\n\nconst UserManual = () => {\n  return (\n    <div>\n      <h2>User Manual</h2>\n      <p>A BF program has 8 different instructions</p>\n      <table className=\"manual-table\">\n        <thead>\n          <tr>\n            <th>Instruction</th>\n            <th>Description</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>&gt;</td>\n            <td>Move the data pointer to the right</td>\n          </tr>\n          <tr>\n            <td>&lt;</td>\n            <td>Move the data pointer to the left</td>\n          </tr>\n          <tr>\n            <td>+</td>\n            <td>Increment the current memory cell</td>\n          </tr>\n          <tr>\n            <td>-</td>\n            <td>Decrement the current memory cell</td>\n          </tr>\n          <tr>\n            <td>,</td>\n            <td>Take one input from the stdin</td>\n          </tr>\n          <tr>\n            <td>.</td>\n            <td>Print the current memory (decoded as ASCII)</td>\n          </tr>\n          <tr>\n            <td>[</td>\n            <td>\n              Do nothing when the current memory cell is 0, otherwise jump to corresponding{\" \"}\n              <code>]</code>\n            </td>\n          </tr>\n          <tr>\n            <td>]</td>\n            <td>\n              Do nothing when the current memory cell is 0, otherwise jump to corresponding{\" \"}\n              <code>[</code>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n      <p>\n        Enter your program in the <span className=\"bordered-text\">Editor</span>. If it is nonempty,\n        you should be able to click on <span className=\"bordered-text\">Run</span> to run it.\n      </p>\n      <p>\n        You can also step through the program one cycle by one cycle after pressing the{\" \"}\n        <span className=\"bordered-text\">Start</span> button.\n      </p>\n      <p>\n        The <span className=\"bordered-text\">Last read</span> section indicates what the program has\n        just read from the user input.\n      </p>\n      <p>\n        To add a breakpoint, just click on the instruction to pause at in the parsed program block.\n      </p>\n      <p>\n        Checkout <a href=\"https://en.wikipedia.org/wiki/Brainfuck\">Wikipedia</a> for more\n        information about Brainfuck.\n      </p>\n    </div>\n  );\n};\n\nexport default UserManual;\n","import \"../css/Memory.css\";\n\nimport { ProgramState } from \"../core/Interpreter\";\n\nexport type MemoryProps = {\n  programState: ProgramState;\n  memoryLower: number;\n  memoryUpper: number;\n};\n\ntype MemoryBlockProps = {\n  index: number;\n  value: number;\n  highlighted: boolean;\n};\n\nconst MemoryBlock = ({ index, value, highlighted }: MemoryBlockProps) => {\n  return (\n    <div className={`memory-block${highlighted ? \" memory-block-highlighted\" : \"\"}`}>\n      <div>{index}</div>\n      <div>\n        {value}|{value.toString(16)}|{JSON.stringify(String.fromCharCode(value)).slice(1, -1)}\n      </div>\n    </div>\n  );\n};\n\nconst Memory = ({ programState, memoryLower, memoryUpper }: MemoryProps) => {\n  return (\n    <div className=\"memory-field\">\n      {programState.memory.slice(memoryLower, memoryUpper).map((value, index) => {\n        const memIndex = index + memoryLower;\n        return (\n          <MemoryBlock\n            index={memIndex}\n            value={value}\n            highlighted={programState.dataPointer === memIndex}\n            key={memIndex}\n          ></MemoryBlock>\n        );\n      })}\n      <p className=\"memory-size\">\n        Showing {memoryUpper - memoryLower} of {programState.memory.size()} memory blocks.\n      </p>\n    </div>\n  );\n};\n\nexport default Memory;\n","import { useMemo } from \"react\";\n\nimport { BrainfuckAction } from \"../hooks/useBrainfuck\";\n\nimport \"../css/Visualization.css\";\n\nimport { isStarted, ProgramState } from \"../core/Interpreter\";\nimport Collapsable from \"./Collapsable\";\nimport Memory from \"./Memory\";\n\nexport type VisualizationProps = {\n  programState: ProgramState;\n  dispatch: (action: BrainfuckAction) => void;\n  memoryDisplayCount: number;\n};\n\nconst Visualization = ({ programState, dispatch, memoryDisplayCount }: VisualizationProps) => {\n  const memoryLower = Math.max(0, programState.dataPointer - Math.floor(memoryDisplayCount / 2));\n  const memoryUpper = Math.min(memoryLower + memoryDisplayCount, programState.memory.size());\n  const isCurrentPc = (pc: number) =>\n    (!programState.blocked &&\n      (pc === programState.programCounter - 1 ||\n        (pc === 0 && programState.programCounter === 0))) ||\n    (programState.blocked && pc === programState.programCounter);\n  const breakpoints = useMemo(() => {\n    let currentBreakpointIndex = 0;\n    return programState.program.map((_, index) => {\n      if (index === programState.breakpoints[currentBreakpointIndex]) {\n        currentBreakpointIndex++;\n        return true;\n      }\n      return false;\n    });\n  }, [programState.program, programState.breakpoints]);\n\n  return (\n    <div>\n      <Collapsable altText=\"Show parsed program\">\n        <h2>Visualization</h2>\n        <div className=\"visualization\">\n          <div className=\"program-field\">\n            {programState.program.map((instruction, index) => (\n              <span\n                key={index}\n                className={(isStarted(programState) && isCurrentPc(index)\n                  ? \"highlighted\"\n                  : \"\"\n                ).concat(breakpoints[index] ? \" breakpoint\" : \"\")}\n                onClick={() => dispatch({ type: \"breakpoint\", data: index })}\n              >\n                {instruction}\n              </span>\n            ))}\n            <p>parsed program</p>\n          </div>\n          <div>\n            <p>cycles: {programState.age}</p>\n            <p>\n              program counter: {programState.programCounter}\n              {programState.blocked && programState.blockType === \"io\"\n                ? \" (waiting for input)\"\n                : \"\"}\n            </p>\n            <p>data pointer: {programState.dataPointer}</p>\n            <p>current data: {programState.memory.query(programState.dataPointer)}</p>\n          </div>\n        </div>\n      </Collapsable>\n      <Collapsable altText=\"Show memory cells\">\n        {\" \"}\n        <p>Memory Cells</p>\n        <Memory programState={programState} memoryLower={memoryLower} memoryUpper={memoryUpper} />\n      </Collapsable>\n    </div>\n  );\n};\n\nexport default Visualization;\n","import { useEffect, useState } from \"react\";\n\nimport { useBrainfuck } from \"../hooks/useBrainfuck\";\n\nimport \"../css/App.css\";\n\nimport Collapsable from \"./Collapsable\";\nimport Console from \"./Console\";\nimport ControlPanel from \"./ControlPanel\";\nimport Editor from \"./Editor\";\nimport GithubLink from \"./GithubLink\";\nimport UserManual from \"./UserManual\";\nimport Visualization from \"./Visualization\";\n\nconst [xlg, lg, md, sm, xs] = [2560, 1920, 1463, 1024, 768];\nconst getMemoryDisplayCount = (width: number) =>\n  width >= xlg\n    ? 64\n    : width >= lg\n    ? 42\n    : width >= md\n    ? 35\n    : width >= sm\n    ? 24\n    : width >= xs\n    ? 15\n    : 12;\n\nfunction App() {\n  const [code, setCode] = useState(\"\");\n  const [brainfuck, dispatch, running] = useBrainfuck(code);\n  const [editorEnabled] = useState(true);\n  const [memoryDisplayCount, setMemoryDisplayCount] = useState(\n    getMemoryDisplayCount(window.innerWidth)\n  );\n\n  useEffect(() => {\n    function handleResize() {\n      setMemoryDisplayCount(getMemoryDisplayCount(window.innerWidth));\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  useEffect(() => {\n    dispatch({ type: \"load\", data: code });\n    dispatch({ type: \"reset\" });\n  }, [code, dispatch]);\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"centered\">react-brainfucked</h1>\n      <h2 className=\"centered\">A brainfuck interpreter & debugger</h2>\n      <main className=\"App-main\">\n        <div>\n          <Collapsable altText=\"Show editor\">\n            <Editor code={code} setCode={setCode} enabled={editorEnabled} />\n          </Collapsable>\n          <Visualization\n            programState={brainfuck}\n            dispatch={dispatch}\n            memoryDisplayCount={memoryDisplayCount}\n          />\n        </div>\n        <div>\n          <Collapsable altText=\"Show control panel\">\n            <ControlPanel\n              programState={brainfuck}\n              setCode={setCode}\n              dispatch={dispatch}\n              running={running}\n            />\n          </Collapsable>\n          <Collapsable altText=\"Show console\">\n            <Console programState={brainfuck} dispatch={dispatch} />\n          </Collapsable>\n          <Collapsable altText=\"Show user manual\">\n            <UserManual />\n          </Collapsable>\n        </div>\n      </main>\n      <GithubLink />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./components/App\";\n\nimport \"./css/index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}